# vim: ft=make
# generic makefile framework
# Copyright (c) 2015 Mikhail Usenko <michaelus@tochka.ru>


# don't try to rebuild this makefile
$(lastword $(MAKEFILE_LIST)): ;


include $(ROOT)/makefile.generic/common.defs


# no default goal
.DEFAULT_GOAL = .


# object files (adjusted to build paths)
{object-files} = $(call !!,$(call _OBJS,$(CXX_FILE_SUFFIX),$(SOURCES)))


# build subdirectory being supposed
{build-dir} = $(call !!,$(CURDIR))


# use secondary expansion to make target-specific and automatic variables
# to be properly expanded in pattern rule prerequisites
.SECONDEXPANSION:


# rules to create/update an archive
%: {target-build-dir} = $(call !,$@)
%: $$({object-files}) | $$({target-build-dir})
	$(info $. *** ($@: $^))
	$(AR) $(ARFLAGS) $(call !!,$(call _LIBS,lib%.a,$@)) $^


# build subdirectory
# {target-build-dir} is supposed to be the same as {build-dir}
$({build-dir})/:
	mkdir -p $@
# if {target-build-dir} is not the same as {build-dir}, it is supposed to be under {build-dir}
# but in this case make prefers the implicit rule to build the main goal
$({build-dir})/%:
	mkdir -p $@


# warning on fall back to the predefined implicit rules (if target file does not exist yet)
(%): % ; $(warning Implicit rule ($@: $^) discarded.)


# reject all other goals
%: ; $(warning Avoid target '$@'.)


# summary of the predefined implicit rules

# AR = ar
# ARFLAGS = rv
# %.a:
# (%): %
#         $(AR) $(ARFLAGS) $@ $<
# .a:

